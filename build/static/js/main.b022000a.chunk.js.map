{"version":3,"sources":["services/persons.js","components/App.js","index.js"],"names":["axios","get","newObject","post","id","delete","Info","props","person","name","toLowerCase","includes","filter","exclude","indexOf","number","button","ContactForm","onSubmit","addPerson","value","newName","onChange","charHandler","newNumber","numHandler","type","Filter","nameFilter","filterHandler","DelButton","onClick","msgHandler","excluder","window","confirm","setTimeout","console","log","impList","ButtonFunctionality","exclusionHandler","App","useState","persons","setPersons","useEffect","then","response","data","msg","setNewName","setNewNumber","setFilter","operationMsg","setOperationMsg","excludedContact","setExclusion","exclHandler","toExclude","concat","event","target","preventDefault","listElem","objList","uniq","forEach","element","isUniq","alert","newContact","className","map","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b022000a.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = '/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst remove = (id) => {\r\n    return (\r\n    axios.delete(`${baseUrl}/${id}`)\r\n    )\r\n}\r\n\r\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport impList from '../services/persons'\r\nimport '../index.css'\r\n\r\n\r\n// --------------------- helper function to check uniqueness ----------------\r\nfunction isUniq(objList, name) {\r\n    var uniq = true\r\n    objList.forEach(element => {\r\n        if (element.name === name) { uniq = false }\r\n    });\r\n    return (uniq)\r\n}\r\n\r\n// -------------------display element item------------------------\r\nconst Info = (props) => {\r\n    if (props.person.name.toLowerCase().includes(props.filter.toLowerCase())) {\r\n\r\n        if (props.exclude.indexOf(props.person.name) < 0) {\r\n            return (\r\n                <p>{props.person.name} {props.person.number} {props.button}</p>\r\n            )\r\n            } else {\r\n                return(null)\r\n            }\r\n\r\n        } else {\r\n            return (null)\r\n        }\r\n}\r\n\r\n// ------------- form to submit contact details------------------------\r\nconst ContactForm = (props) => {\r\n    return (\r\n        // form with two inputs and a button\r\n        <form onSubmit={props.addPerson}>\r\n\r\n            <div>\r\n                name: <input\r\n                    value={props.newName}\r\n                    onChange={props.charHandler}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                number: <input\r\n                    value={props.newNumber}\r\n                    onChange={props.numHandler}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <button type=\"submit\">\r\n                    add\r\n                </button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\n// ---------------------- filter the list of contacts -------------------------------\r\nconst Filter = (props) => {\r\n    return (\r\n        <div>\r\n            filter contacts by name:\r\n            <input\r\n                value={props.nameFilter}\r\n                onChange={props.filterHandler}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction ButtonFunctionality(name, id, msgHandler, excluder) {\r\n    if (window.confirm('Are you sure you want to remove ' + name)){\r\n        msgHandler('Contact removed successfully')\r\n        excluder(name)\r\n        setTimeout(() => msgHandler(null), 2000)\r\n        console.log(\"ButtonFunction id \" + id)\r\n        return (\r\n            impList.remove(id)\r\n        )\r\n    }\r\n}\r\n\r\nconst DelButton = (props) => {\r\n    // move to on click not to be run always\r\n        return (\r\n        <button onClick={() =>\r\n            ButtonFunctionality(props.name, props.id, props.msgHandler, props.exclusionHandler)\r\n        }> remove </button>\r\n        )\r\n}\r\n\r\n// custom success alert\r\nconst SuccAlert = (msg) => {\r\n    if (msg !== null){\r\n        return(\r\n        <div className='succAlertMsg'>\r\n            {msg}\r\n        </div>\r\n        )\r\n    } else {\r\n        return(null)\r\n    }\r\n}\r\n\r\n// ****************** APP TO RENDER *************************\r\nconst App = () => {\r\n\r\n    const [persons, setPersons] = useState([])\r\n\r\n    // -------------------- event hook to load data from server to state ---------------------\r\n    useEffect(() => {\r\n        console.log('effect')\r\n        impList.getAll()\r\n          .then(response => {\r\n            console.log('promise fulfilled')\r\n            setPersons(response.data)\r\n          })\r\n      }, [])\r\n\r\n    // -------------------name handler---------------------------------\r\n    const [newName, setNewName] = useState('')  // reset state\r\n\r\n    const charHandler = (event) => {\r\n        console.log('char event', event.target.value)\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    // --------------------------number handler-------------------------\r\n    const [newNumber, setNewNumber] = useState('')\r\n\r\n    const numHandler = (event) => {\r\n        console.log('num event', event.target.value)\r\n        setNewNumber(event.target.value)\r\n    }\r\n\r\n    // --------------------------filter handler------------------------\r\n    const [nameFilter, setFilter] = useState('')\r\n\r\n    const filterHandler = (event) => {\r\n        console.log('filter event', event.target.value)\r\n        setFilter(event.target.value)\r\n    }\r\n\r\n    // operation message handler\r\n    const [operationMsg, setOperationMsg] = useState(null)\r\n\r\n    // client side handler for contact removal\r\n    const [excludedContact, setExclusion] = useState([])\r\n\r\n    const exclHandler = (toExclude) => {\r\n        setExclusion(excludedContact.concat(toExclude))\r\n    }\r\n\r\n    // ----------------------new contact form submission handler------------------------ \r\n    const submitNewContact = (event) => {\r\n\r\n        // prevent default form submission\r\n        event.preventDefault()\r\n\r\n        // convert to list element\r\n        const listElem = {\r\n            name: newName,\r\n            number: newNumber\r\n        }\r\n\r\n        // if unique add to contacts details given\r\n        if (isUniq(persons, newName)) {\r\n            setNewName(newName)\r\n            setNewNumber(newNumber)\r\n            console.log('post')\r\n            impList.create(listElem)\r\n                .then(\r\n                    newContact =>{\r\n                    setPersons(persons.concat(newContact.data))\r\n                    setOperationMsg('Addition successful!')\r\n                    setTimeout(() => setOperationMsg(null), 2000)\r\n                    }\r\n                )\r\n        } else {\r\n            alert(newName + ' is not unique')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h2>Phonebook</h2>\r\n            <Filter\r\n                nameFilter={nameFilter}\r\n                filterHandler={filterHandler}\r\n            />\r\n\r\n            <h2>Add new contact</h2>\r\n            <ContactForm\r\n                addPerson={submitNewContact}\r\n                newName={newName}\r\n                charHandler={charHandler}\r\n                newNumber={newNumber}\r\n                numHandler={numHandler}\r\n            />\r\n            {SuccAlert(operationMsg)}\r\n\r\n            <h2>Numbers</h2>\r\n            {console.log(\"persons \", persons)}\r\n            {persons.map(person =>\r\n                <Info\r\n                    key={person.name}\r\n                    person={person}\r\n                    filter={nameFilter}\r\n                    button={<DelButton\r\n                        name={person.name}\r\n                        id={person.id}\r\n                        msgHandler={setOperationMsg}\r\n                        exclusionHandler={exclHandler}\r\n                        />}\r\n                    exclude={excludedContact}\r\n                />\r\n            )}\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default App","import ReactDOM from 'react-dom';\r\nimport React, { useState } from 'react'\r\nimport { render } from '@testing-library/react'\r\nimport App from './components/App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}